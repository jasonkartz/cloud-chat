{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\1-Web-Projects\\\\cloud-chat\\\\src\\\\components\\\\UserSettings.js\",\n    _s = $RefreshSig$();\n\nimport defaultPic from \"../images/cloud-fill.png\";\nimport { ref, uploadBytesResumable, getDownloadURL, deleteObject, listAll } from \"firebase/storage\";\nimport { updateProfile, updateEmail, updatePassword, deleteUser, reauthenticateWithCredential, EmailAuthProvider } from \"firebase/auth\";\nimport { doc, updateDoc, deleteDoc } from \"firebase/firestore\";\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\nimport { storage, auth, db } from \"../backend/firebase-config\";\nimport { useState } from \"react\";\nimport UpdateProfileImage from \"./user-settings-page/UpdateProfileImage\";\nimport UpdateUserName from \"./user-settings-page/UpdateUserName\";\nimport UpdateName from \"./user-settings-page/UpdateName\";\nimport UpdateEmail from \"./user-settings-page/UpdateEmail\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserSettings() {\n  _s();\n\n  const {\n    uid,\n    displayName,\n    email\n  } = auth.currentUser;\n  const accountRef = doc(db, \"accounts\", uid);\n  const [account, loading, error] = useDocumentData(accountRef);\n  /* collect all sign-in poviders linked to user */\n\n  const providerIdList = [];\n\n  if (auth.currentUser !== null) {\n    auth.currentUser.providerData.forEach(profile => {\n      providerIdList.push(profile.providerId);\n    });\n  }\n  /* reusable reauthentication function */\n\n\n  const reauthenticate = password => {\n    const credential = EmailAuthProvider.credential(email, password);\n    reauthenticateWithCredential(auth.currentUser, credential);\n  };\n  /* PASSWORD */\n\n\n  const [passwordForm, setPasswordForm] = useState({\n    current: \"\",\n    new: \"\",\n    email: \"\",\n    delete: \"\"\n  });\n  const [passwordStatus, setPasswordStatus] = useState(\"\");\n\n  const passwordSubmit = async () => {\n    setPasswordStatus(\"Updating password...\");\n    await reauthenticate(passwordForm.current);\n    await updatePassword(auth.currentUser, passwordForm.new).then(() => {\n      setPasswordStatus(\"Password updated\");\n      setPasswordForm({ ...passwordForm,\n        current: \"\",\n        new: \"\"\n      });\n      setTimeout(() => setPasswordStatus(\"\"), 5000);\n    }).catch(error => {\n      setPasswordStatus(\"Error updating password. Please try again.\");\n      setPasswordForm({ ...passwordForm,\n        current: \"\",\n        new: \"\"\n      });\n      setTimeout(() => setPasswordStatus(\"\"), 5000);\n    });\n  };\n  /* EMAIL */\n\n  /* Delete Account */\n\n\n  const [deleteForm, setDeleteForm] = useState(\"\");\n  const [deleteStatus, setDeleteStatus] = useState(\"\");\n  const [deleteView, setDeleteView] = useState(false);\n\n  const deleteConfirm = async () => {\n    setDeleteStatus(\"Authenticating...\");\n    await reauthenticate(passwordForm.delete);\n\n    if (deleteForm === \"DELETE\") {\n      setPasswordForm({ ...passwordForm,\n        delete: \"\"\n      });\n      setDeleteView(true);\n      setDeleteStatus(\"Are you sure you want to delete your account? This will be permanent and cannot be recovered.\");\n    } else {\n      setDeleteStatus(\"Please type 'DELETE' in the box above before submitting.\");\n      setDeleteForm(\"\");\n      setTimeout(() => setDeleteStatus(\"\"), 5000);\n    }\n  };\n\n  const deleteCancel = () => {\n    setDeleteView(false);\n    setDeleteForm(\"\");\n    setDeleteStatus(\"Whew... that was a close one!\");\n    setTimeout(() => setDeleteStatus(\"\"), 5000);\n  };\n\n  const deleteAccount = async () => {\n    setDeleteStatus(\"Deleting account...\");\n    const userStorage = ref(storage, \"users/\" + uid);\n\n    if (userStorage) {\n      await listAll(userStorage).then(res => {\n        res.items.forEach(itemRef => {\n          deleteObject(itemRef);\n        });\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    await deleteUser(auth.currentUser).then(() => {\n      deleteDoc(accountRef);\n    }).catch(error => {\n      console.log(error.code + \" \" + error.message);\n      setDeleteStatus(\"Error deleting account. Please try again.\");\n      setDeleteForm(\"\");\n      setDeleteView(false);\n      setTimeout(() => setDeleteStatus(\"\"), 5000);\n    });\n  };\n  /* render form */\n\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-box\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"flex gap-1 blue-heading\",\n        children: [\"Loading\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"animate-spin\",\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"ri-loader-5-line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  } else if (account) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-box\",\n        children: [/*#__PURE__*/_jsxDEV(UpdateProfileImage, {\n          account: account,\n          accountRef: accountRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpdateUserName, {\n          account: account,\n          accountRef: accountRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpdateName, {\n          account: account,\n          accountRef: accountRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UpdateEmail, {\n          account: account,\n          accountRef: accountRef,\n          reauthenticate: reauthenticate\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), providerIdList.includes(\"password\") && /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"blue-heading\",\n            children: \"Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Enter your current password\",\n            className: \"form-input\",\n            value: passwordForm.current,\n            onChange: e => setPasswordForm({ ...passwordForm,\n              current: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"password\",\n            placeholder: \"Enter your new password\",\n            className: \"form-input\",\n            value: passwordForm.new,\n            onChange: e => setPasswordForm({ ...passwordForm,\n              new: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            disabled: !passwordForm.current || !passwordForm.new,\n            className: `btn`,\n            onClick: passwordSubmit,\n            children: \"Change Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: passwordStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"pb-8 settings-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"blue-heading\",\n            children: \"Delete Account\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), !deleteView && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Type DELETE in all caps\",\n              className: \"form-input\",\n              value: deleteForm,\n              onChange: e => setDeleteForm(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"password\",\n              placeholder: \"Enter your password\",\n              className: \"form-input\",\n              value: passwordForm.delete,\n              onChange: e => setPasswordForm({ ...passwordForm,\n                delete: e.target.value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"btn\",\n              disabled: !deleteForm || !passwordForm.delete,\n              onClick: deleteConfirm,\n              children: \"Delete Account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: deleteStatus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), deleteView && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: deleteAccount,\n              children: \"Yes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn\",\n              onClick: deleteCancel,\n              children: \"No\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"main-box\",\n      children: `Error Loading Content :(`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 12\n    }, this);\n  }\n}\n/*\r\ntodo:\r\n- break up settings into components with their own state\r\n- link signin providers (ie. allow google signin users to create email/pass signin method)\r\n- password reset email link (ie. \"forgot password\")\r\n- confirmation email for making changes in settings / account deletion\r\n- user generated chatrooms\r\n- private messaging\r\n- switchable dark mode\r\n- allow users to load previous messages after scrolling up\r\n- allow users to view other user profiles\r\n- timestamp messages\r\n*/\n\n_s(UserSettings, \"OAyK2iR7YfX/Tcca/KXWjgE7OyI=\", false, function () {\n  return [useDocumentData];\n});\n\n_c = UserSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSettings\");","map":{"version":3,"sources":["C:/Users/jason/Documents/1-Web-Projects/cloud-chat/src/components/UserSettings.js"],"names":["defaultPic","ref","uploadBytesResumable","getDownloadURL","deleteObject","listAll","updateProfile","updateEmail","updatePassword","deleteUser","reauthenticateWithCredential","EmailAuthProvider","doc","updateDoc","deleteDoc","useDocumentData","storage","auth","db","useState","UpdateProfileImage","UpdateUserName","UpdateName","UpdateEmail","UserSettings","uid","displayName","email","currentUser","accountRef","account","loading","error","providerIdList","providerData","forEach","profile","push","providerId","reauthenticate","password","credential","passwordForm","setPasswordForm","current","new","delete","passwordStatus","setPasswordStatus","passwordSubmit","then","setTimeout","catch","deleteForm","setDeleteForm","deleteStatus","setDeleteStatus","deleteView","setDeleteView","deleteConfirm","deleteCancel","deleteAccount","userStorage","res","items","itemRef","console","log","code","message","includes","e","target","value"],"mappings":"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","sourcesContent":["import defaultPic from \"../images/cloud-fill.png\";\r\nimport {\r\n  ref,\r\n  uploadBytesResumable,\r\n  getDownloadURL,\r\n  deleteObject,\r\n  listAll,\r\n} from \"firebase/storage\";\r\nimport {\r\n  updateProfile,\r\n  updateEmail,\r\n  updatePassword,\r\n  deleteUser,\r\n  reauthenticateWithCredential,\r\n  EmailAuthProvider,\r\n} from \"firebase/auth\";\r\nimport { doc, updateDoc, deleteDoc } from \"firebase/firestore\";\r\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\r\nimport { storage, auth, db } from \"../backend/firebase-config\";\r\nimport { useState } from \"react\";\r\nimport UpdateProfileImage from \"./user-settings-page/UpdateProfileImage\";\r\nimport UpdateUserName from \"./user-settings-page/UpdateUserName\";\r\nimport UpdateName from \"./user-settings-page/UpdateName\";\r\nimport UpdateEmail from \"./user-settings-page/UpdateEmail\";\r\n\r\nexport default function UserSettings() {\r\n  const { uid, displayName, email } = auth.currentUser;\r\n  const accountRef = doc(db, \"accounts\", uid);\r\n  const [account, loading, error] = useDocumentData(accountRef);\r\n\r\n  /* collect all sign-in poviders linked to user */\r\n  const providerIdList = [];\r\n\r\n  if (auth.currentUser !== null) {\r\n    auth.currentUser.providerData.forEach((profile) => {\r\n      providerIdList.push(profile.providerId);\r\n    });\r\n  }\r\n\r\n  /* reusable reauthentication function */\r\n  const reauthenticate = (password) => {\r\n    const credential = EmailAuthProvider.credential(email, password);\r\n    reauthenticateWithCredential(auth.currentUser, credential);\r\n  };\r\n\r\n  /* PASSWORD */\r\n  const [passwordForm, setPasswordForm] = useState({\r\n    current: \"\",\r\n    new: \"\",\r\n    email: \"\",\r\n    delete: \"\",\r\n  });\r\n  const [passwordStatus, setPasswordStatus] = useState(\"\");\r\n\r\n  const passwordSubmit = async () => {\r\n    setPasswordStatus(\"Updating password...\");\r\n\r\n    await reauthenticate(passwordForm.current);\r\n\r\n    await updatePassword(auth.currentUser, passwordForm.new)\r\n      .then(() => {\r\n        setPasswordStatus(\"Password updated\");\r\n        setPasswordForm({ ...passwordForm, current: \"\", new: \"\" });\r\n        setTimeout(() => setPasswordStatus(\"\"), 5000);\r\n      })\r\n      .catch((error) => {\r\n        setPasswordStatus(\"Error updating password. Please try again.\");\r\n        setPasswordForm({ ...passwordForm, current: \"\", new: \"\" });\r\n        setTimeout(() => setPasswordStatus(\"\"), 5000);\r\n      });\r\n  };\r\n\r\n  /* EMAIL */\r\n\r\n  /* Delete Account */\r\n\r\n  const [deleteForm, setDeleteForm] = useState(\"\");\r\n  const [deleteStatus, setDeleteStatus] = useState(\"\");\r\n  const [deleteView, setDeleteView] = useState(false);\r\n\r\n  const deleteConfirm = async () => {\r\n    setDeleteStatus(\"Authenticating...\");\r\n\r\n    await reauthenticate(passwordForm.delete);\r\n\r\n    if (deleteForm === \"DELETE\") {\r\n      setPasswordForm({ ...passwordForm, delete: \"\" });\r\n      setDeleteView(true);\r\n      setDeleteStatus(\r\n        \"Are you sure you want to delete your account? This will be permanent and cannot be recovered.\"\r\n      );\r\n    } else {\r\n      setDeleteStatus(\r\n        \"Please type 'DELETE' in the box above before submitting.\"\r\n      );\r\n      setDeleteForm(\"\");\r\n      setTimeout(() => setDeleteStatus(\"\"), 5000);\r\n    }\r\n  };\r\n\r\n  const deleteCancel = () => {\r\n    setDeleteView(false);\r\n    setDeleteForm(\"\");\r\n    setDeleteStatus(\"Whew... that was a close one!\");\r\n    setTimeout(() => setDeleteStatus(\"\"), 5000);\r\n  };\r\n\r\n  const deleteAccount = async () => {\r\n    setDeleteStatus(\"Deleting account...\");\r\n    const userStorage = ref(storage, \"users/\" + uid);\r\n    if (userStorage) {\r\n      await listAll(userStorage)\r\n        .then((res) => {\r\n          res.items.forEach((itemRef) => {\r\n            deleteObject(itemRef);\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n    await deleteUser(auth.currentUser)\r\n      .then(() => {\r\n        deleteDoc(accountRef);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.code + \" \" + error.message);\r\n        setDeleteStatus(\"Error deleting account. Please try again.\");\r\n        setDeleteForm(\"\");\r\n        setDeleteView(false);\r\n        setTimeout(() => setDeleteStatus(\"\"), 5000);\r\n      });\r\n  };\r\n\r\n  /* render form */\r\n\r\n  if (loading) {\r\n    return (\r\n      <main className=\"main-box\">\r\n        <h2 className=\"flex gap-1 blue-heading\">\r\n          Loading\r\n          <div className=\"animate-spin\">\r\n            <i className=\"ri-loader-5-line\"></i>\r\n          </div>\r\n        </h2>\r\n      </main>\r\n    );\r\n  } else if (account) {\r\n    return (\r\n      <>\r\n        <main className=\"main-box\">\r\n          <UpdateProfileImage account={account} accountRef={accountRef} />\r\n\r\n          <UpdateUserName account={account} accountRef={accountRef} />\r\n\r\n          <UpdateName account={account} accountRef={accountRef} />\r\n\r\n          <UpdateEmail\r\n            account={account}\r\n            accountRef={accountRef}\r\n            reauthenticate={reauthenticate}\r\n          />\r\n\r\n          {/* PASSWORD */}\r\n\r\n          {providerIdList.includes(\"password\") && (\r\n            <section className=\"settings-section\">\r\n              <h2 className=\"blue-heading\">Password</h2>\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Enter your current password\"\r\n                className=\"form-input\"\r\n                value={passwordForm.current}\r\n                onChange={(e) =>\r\n                  setPasswordForm({ ...passwordForm, current: e.target.value })\r\n                }\r\n              />\r\n              <input\r\n                type=\"password\"\r\n                placeholder=\"Enter your new password\"\r\n                className=\"form-input\"\r\n                value={passwordForm.new}\r\n                onChange={(e) =>\r\n                  setPasswordForm({ ...passwordForm, new: e.target.value })\r\n                }\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={!passwordForm.current || !passwordForm.new}\r\n                className={`btn`}\r\n                onClick={passwordSubmit}\r\n              >\r\n                Change Password\r\n              </button>\r\n              <p>{passwordStatus}</p>\r\n            </section>\r\n          )}\r\n\r\n          {/* DELETE ACCOUNT */}\r\n          <section className=\"pb-8 settings-section\">\r\n            <h2 className=\"blue-heading\">Delete Account</h2>\r\n\r\n            {!deleteView && (\r\n              <>\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Type DELETE in all caps\"\r\n                  className=\"form-input\"\r\n                  value={deleteForm}\r\n                  onChange={(e) => setDeleteForm(e.target.value)}\r\n                />\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Enter your password\"\r\n                  className=\"form-input\"\r\n                  value={passwordForm.delete}\r\n                  onChange={(e) =>\r\n                    setPasswordForm({ ...passwordForm, delete: e.target.value })\r\n                  }\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"btn\"\r\n                  disabled={!deleteForm || !passwordForm.delete}\r\n                  onClick={deleteConfirm}\r\n                >\r\n                  Delete Account\r\n                </button>\r\n              </>\r\n            )}\r\n            <p>{deleteStatus}</p>\r\n            {deleteView && (\r\n              <div className=\"flex gap-2\">\r\n                <button className=\"btn\" onClick={deleteAccount}>\r\n                  Yes\r\n                </button>\r\n                <button className=\"btn\" onClick={deleteCancel}>\r\n                  No\r\n                </button>\r\n              </div>\r\n            )}\r\n          </section>\r\n        </main>\r\n      </>\r\n    );\r\n  } else if (error) {\r\n    return <main className=\"main-box\">{`Error Loading Content :(`}</main>;\r\n  }\r\n}\r\n\r\n/*\r\ntodo:\r\n- break up settings into components with their own state\r\n- link signin providers (ie. allow google signin users to create email/pass signin method)\r\n- password reset email link (ie. \"forgot password\")\r\n- confirmation email for making changes in settings / account deletion\r\n- user generated chatrooms\r\n- private messaging\r\n- switchable dark mode\r\n- allow users to load previous messages after scrolling up\r\n- allow users to view other user profiles\r\n- timestamp messages\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}