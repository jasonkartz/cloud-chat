{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\1-Web-Projects\\\\cloud-chat\\\\src\\\\components\\\\PublicChats.js\",\n    _s = $RefreshSig$();\n\nimport { useCollectionData, useDocumentData } from \"react-firebase-hooks/firestore\";\nimport Error from \"./Error\";\nimport Loading from \"./Loading\";\nimport { collection, orderBy, query, limitToLast, serverTimestamp, addDoc, doc, documentId } from \"firebase/firestore\";\nimport { useState, useRef, useEffect } from \"react\";\nimport { auth, db } from \"../backend/firebase-config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatList(_ref) {\n  _s();\n\n  let {\n    user,\n    roomSelection,\n    setRoomSelection,\n    setOpenMenu,\n    setRoomName,\n    roomName,\n    chatPath,\n    setChatPath\n  } = _ref;\n  const publicChatsRef = collection(db, \"publicChats\");\n  const publicChatsQ = query(publicChatsRef, orderBy(\"name\"), limitToLast(25));\n  const [publicChats, loading, error, snapshot] = useCollectionData(publicChatsQ);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: publicChats.map((chatroom, index) => {\n          const roomID = snapshot._snapshot.docChanges[index].doc.key.path.segments[6];\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `rounded px-1 ${roomID === roomSelection ? \"bg-blue-50/25 text-gray-700\" : \"hover:cursor-pointer hover:bg-blue-50/50 hover:text-blue-600\"}`,\n            onClick: () => {\n              if (roomID !== roomSelection) {\n                setRoomSelection(roomID);\n                setChatPath(`/publicChats/${roomSelection}/messages`);\n                setRoomName(chatroom.name);\n                setOpenMenu(false);\n              }\n            },\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: [chatroom.name, roomID === roomSelection && \" (Current room)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n} // snapshot._snapshot.docChanges[index].doc.key.path.segments[6]\n\n_s(ChatList, \"uBh7ZmTlCUqupVAu5VqGt0Z9HyE=\", false, function () {\n  return [useCollectionData];\n});\n\n_c = ChatList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatList\");","map":{"version":3,"sources":["C:/Users/jason/Documents/1-Web-Projects/cloud-chat/src/components/PublicChats.js"],"names":["useCollectionData","useDocumentData","Error","Loading","collection","orderBy","query","limitToLast","serverTimestamp","addDoc","doc","documentId","useState","useRef","useEffect","auth","db","ChatList","user","roomSelection","setRoomSelection","setOpenMenu","setRoomName","roomName","chatPath","setChatPath","publicChatsRef","publicChatsQ","publicChats","loading","error","snapshot","map","chatroom","index","roomID","_snapshot","docChanges","key","path","segments","name"],"mappings":";;;AAAA,SACEA,iBADF,EAEEC,eAFF,QAGO,gCAHP;AAIA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SACEC,UADF,EAEEC,OAFF,EAGEC,KAHF,EAIEC,WAJF,EAKEC,eALF,EAMEC,MANF,EAOEC,GAPF,EAQEC,UARF,QASO,oBATP;AAUA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,IAAT,EAAeC,EAAf,QAAyB,4BAAzB;;;AAEA,eAAe,SAASC,QAAT,OASZ;AAAA;;AAAA,MAT8B;AAC/BC,IAAAA,IAD+B;AAE/BC,IAAAA,aAF+B;AAG/BC,IAAAA,gBAH+B;AAI/BC,IAAAA,WAJ+B;AAK/BC,IAAAA,WAL+B;AAM/BC,IAAAA,QAN+B;AAO/BC,IAAAA,QAP+B;AAQ/BC,IAAAA;AAR+B,GAS9B;AACD,QAAMC,cAAc,GAAGtB,UAAU,CAACY,EAAD,EAAK,aAAL,CAAjC;AACA,QAAMW,YAAY,GAAGrB,KAAK,CAACoB,cAAD,EAAiBrB,OAAO,CAAC,MAAD,CAAxB,EAAkCE,WAAW,CAAC,EAAD,CAA7C,CAA1B;AACA,QAAM,CAACqB,WAAD,EAAcC,OAAd,EAAuBC,KAAvB,EAA8BC,QAA9B,IACJ/B,iBAAiB,CAAC2B,YAAD,CADnB;;AAIA,MAAIE,OAAJ,EAAa;AACX,wBACE;AAAA,6BACE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAKD,GAND,MAMO,IAAIC,KAAJ,EAAW;AAChB,wBACE;AAAA,6BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAKD,GANM,MAMA;AACL,wBACE;AAAA,6BACE;AAAA,kBACGF,WAAW,CAACI,GAAZ,CAAgB,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACpC,gBAAMC,MAAM,GACZJ,QAAQ,CAACK,SAAT,CAAmBC,UAAnB,CAA8BH,KAA9B,EAAqCxB,GAArC,CAAyC4B,GAAzC,CAA6CC,IAA7C,CAAkDC,QAAlD,CAA2D,CAA3D,CADA;AAEA,8BACE;AACE,YAAA,SAAS,EAAG,gBACVL,MAAM,KAAKhB,aAAX,GACI,6BADJ,GAEI,8DACL,EALH;AAOE,YAAA,OAAO,EAAE,MAAM;AACb,kBAAIgB,MAAM,KAAKhB,aAAf,EAA8B;AAC5BC,gBAAAA,gBAAgB,CAACe,MAAD,CAAhB;AACAV,gBAAAA,WAAW,CAAE,gBAAeN,aAAc,WAA/B,CAAX;AACAG,gBAAAA,WAAW,CAACW,QAAQ,CAACQ,IAAV,CAAX;AACApB,gBAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,aAdH;AAAA,mCAgBE;AAAA,yBACGY,QAAQ,CAACQ,IADZ,EAEGN,MAAM,KAAKhB,aAAX,IAA4B,iBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAhBF,aAMOe,KANP;AAAA;AAAA;AAAA;AAAA,kBADF;AAuBD,SA1BA;AADH;AAAA;AAAA;AAAA;AAAA;AADF,qBADF;AAiCD;AACF,C,CAGD;;GAlEwBjB,Q;UAapBjB,iB;;;KAboBiB,Q","sourcesContent":["import {\r\n  useCollectionData,\r\n  useDocumentData,\r\n} from \"react-firebase-hooks/firestore\";\r\nimport Error from \"./Error\";\r\nimport Loading from \"./Loading\";\r\nimport {\r\n  collection,\r\n  orderBy,\r\n  query,\r\n  limitToLast,\r\n  serverTimestamp,\r\n  addDoc,\r\n  doc,\r\n  documentId,\r\n} from \"firebase/firestore\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\nimport { auth, db } from \"../backend/firebase-config\";\r\n\r\nexport default function ChatList({\r\n  user,\r\n  roomSelection,\r\n  setRoomSelection,\r\n  setOpenMenu,\r\n  setRoomName,\r\n  roomName,\r\n  chatPath,\r\n  setChatPath\r\n}) {\r\n  const publicChatsRef = collection(db, \"publicChats\");\r\n  const publicChatsQ = query(publicChatsRef, orderBy(\"name\"), limitToLast(25));\r\n  const [publicChats, loading, error, snapshot] =\r\n    useCollectionData(publicChatsQ);\r\n\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Loading />\r\n      </>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <>\r\n        <Error />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <ul>\r\n          {publicChats.map((chatroom, index) => {\r\n            const roomID =\r\n            snapshot._snapshot.docChanges[index].doc.key.path.segments[6]\r\n            return (\r\n              <li\r\n                className={`rounded px-1 ${\r\n                  roomID === roomSelection\r\n                    ? \"bg-blue-50/25 text-gray-700\"\r\n                    : \"hover:cursor-pointer hover:bg-blue-50/50 hover:text-blue-600\"\r\n                }`}\r\n                key={index}\r\n                onClick={() => {\r\n                  if (roomID !== roomSelection) {\r\n                    setRoomSelection(roomID);\r\n                    setChatPath(`/publicChats/${roomSelection}/messages`)\r\n                    setRoomName(chatroom.name);\r\n                    setOpenMenu(false);\r\n                  }\r\n                }}\r\n              >\r\n                <span>\r\n                  {chatroom.name}\r\n                  {roomID === roomSelection && \" (Current room)\"}\r\n                </span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n// snapshot._snapshot.docChanges[index].doc.key.path.segments[6]"]},"metadata":{},"sourceType":"module"}