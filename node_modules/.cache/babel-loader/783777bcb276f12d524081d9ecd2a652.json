{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\1-Web-Projects\\\\cloud-chat\\\\src\\\\components\\\\user-settings-page\\\\UserSettings.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { reauthenticateWithCredential, EmailAuthProvider } from \"firebase/auth\";\nimport { doc } from \"firebase/firestore\";\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\nimport { auth, db } from \"../../backend/firebase-config\";\nimport UpdateProfileImage from \"./UpdateProfileImage\";\nimport UpdateUserName from \"./UpdateUserName\";\nimport UpdateName from \"./UpdateName\";\nimport UpdateEmail from \"./UpdateEmail\";\nimport UpdatePassword from \"./UpdatePassword\";\nimport DeleteAccount from \"./DeleteAccount\";\nimport AddSignin from \"./AddSignin\";\nimport Error from \"../Error\";\nimport Loading from \"../Loading\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function UserSettings() {\n  _s();\n\n  const currentUser = auth.currentUser;\n  const {\n    uid,\n    email\n  } = currentUser;\n  const accountRef = doc(db, \"accounts\", uid);\n  const [account, loading, error] = useDocumentData(accountRef);\n  const [deleteView, setDeleteView] = useState(false);\n  /* remounts component by changing the key property */\n\n  const [keyForRemount, setKeyForRemount] = useState(1);\n  /* collect all sign-in poviders linked to user */\n\n  const providerIdList = [];\n\n  if (currentUser !== null) {\n    currentUser.providerData.forEach(profile => {\n      providerIdList.push(profile.providerId);\n    });\n  }\n  /* reusable reauthentication function */\n\n\n  const reauthenticate = password => {\n    const credential = EmailAuthProvider.credential(email, password);\n    reauthenticateWithCredential(currentUser, credential);\n  };\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  } else if (account) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!deleteView && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [providerIdList.length < 2 && /*#__PURE__*/_jsxDEV(AddSignin, {\n          reauthenticate: reauthenticate,\n          providerIdList: providerIdList,\n          setKeyForRemount: setKeyForRemount\n        }, keyForRemount, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(UpdateProfileImage, {\n          account: account,\n          accountRef: accountRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UpdateUserName, {\n          account: account,\n          accountRef: accountRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UpdateName, {\n          account: account,\n          accountRef: accountRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UpdateEmail, {\n          accountRef: accountRef,\n          reauthenticate: reauthenticate,\n          providerIdList: providerIdList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(UpdatePassword, {\n          reauthenticate: reauthenticate,\n          providerIdList: providerIdList\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"profile-back-btn\",\n        onClick: () => setDeleteView(!deleteView),\n        children: deleteView ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"ri-arrow-go-back-line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Back to settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 68\n          }, this)]\n        }, void 0, true) : \"Delete account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), deleteView && /*#__PURE__*/_jsxDEV(DeleteAccount, {\n        account: account,\n        accountRef: accountRef,\n        reauthenticate: reauthenticate,\n        providerIdList: providerIdList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  } else if (error) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}\n/*\r\ntodo:\r\n- password reset email link (ie. \"forgot password\")\r\n- confirmation email for making changes in settings / account deletion\r\n*/\n\n_s(UserSettings, \"achk1B6papfYfS+OvQlxUZq3H3w=\", false, function () {\n  return [useDocumentData];\n});\n\n_c = UserSettings;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserSettings\");","map":{"version":3,"sources":["C:/Users/jason/Documents/1-Web-Projects/cloud-chat/src/components/user-settings-page/UserSettings.js"],"names":["useState","reauthenticateWithCredential","EmailAuthProvider","doc","useDocumentData","auth","db","UpdateProfileImage","UpdateUserName","UpdateName","UpdateEmail","UpdatePassword","DeleteAccount","AddSignin","Error","Loading","UserSettings","currentUser","uid","email","accountRef","account","loading","error","deleteView","setDeleteView","keyForRemount","setKeyForRemount","providerIdList","providerData","forEach","profile","push","providerId","reauthenticate","password","credential","length"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\r\nimport { reauthenticateWithCredential, EmailAuthProvider } from \"firebase/auth\";\r\nimport { doc } from \"firebase/firestore\";\r\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\r\nimport { auth, db } from \"../../backend/firebase-config\";\r\nimport UpdateProfileImage from \"./UpdateProfileImage\";\r\nimport UpdateUserName from \"./UpdateUserName\";\r\nimport UpdateName from \"./UpdateName\";\r\nimport UpdateEmail from \"./UpdateEmail\";\r\nimport UpdatePassword from \"./UpdatePassword\";\r\nimport DeleteAccount from \"./DeleteAccount\";\r\nimport AddSignin from \"./AddSignin\";\r\nimport Error from \"../Error\";\r\nimport Loading from \"../Loading\";\r\n\r\nexport default function UserSettings() {\r\n  const currentUser = auth.currentUser;\r\n  const { uid, email } = currentUser;\r\n  const accountRef = doc(db, \"accounts\", uid);\r\n  const [account, loading, error] = useDocumentData(accountRef);\r\n\r\n  const [deleteView, setDeleteView] = useState(false);\r\n\r\n  /* remounts component by changing the key property */\r\n  const [keyForRemount, setKeyForRemount] = useState(1);\r\n\r\n  /* collect all sign-in poviders linked to user */\r\n  const providerIdList = [];\r\n\r\n  if (currentUser !== null) {\r\n    currentUser.providerData.forEach((profile) => {\r\n      providerIdList.push(profile.providerId);\r\n    });\r\n  }\r\n\r\n  /* reusable reauthentication function */\r\n  const reauthenticate = (password) => {\r\n    const credential = EmailAuthProvider.credential(email, password);\r\n    reauthenticateWithCredential(currentUser, credential);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Loading />\r\n      </>\r\n    );\r\n  } else if (account) {\r\n    return (\r\n      <>\r\n        {!deleteView && (\r\n          <>\r\n            {providerIdList.length < 2 && (\r\n              <AddSignin\r\n                reauthenticate={reauthenticate}\r\n                providerIdList={providerIdList}\r\n                key={keyForRemount}\r\n                setKeyForRemount={setKeyForRemount}\r\n              />\r\n            )}\r\n            <UpdateProfileImage account={account} accountRef={accountRef} />\r\n\r\n            <UpdateUserName account={account} accountRef={accountRef} />\r\n\r\n            <UpdateName account={account} accountRef={accountRef} />\r\n\r\n            <UpdateEmail\r\n              accountRef={accountRef}\r\n              reauthenticate={reauthenticate}\r\n              providerIdList={providerIdList}\r\n            />\r\n\r\n            <UpdatePassword\r\n              reauthenticate={reauthenticate}\r\n              providerIdList={providerIdList}\r\n            />\r\n          </>\r\n        )}\r\n        <button className=\"profile-back-btn\" onClick={() => setDeleteView(!deleteView)}>\r\n          {deleteView ? <><i className=\"ri-arrow-go-back-line\"></i><span>Back to settings</span></> : \"Delete account\"}\r\n        </button>\r\n        {deleteView && (\r\n          <DeleteAccount\r\n            account={account}\r\n            accountRef={accountRef}\r\n            reauthenticate={reauthenticate}\r\n            providerIdList={providerIdList}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <>\r\n        <Error />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\ntodo:\r\n- password reset email link (ie. \"forgot password\")\r\n- confirmation email for making changes in settings / account deletion\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}