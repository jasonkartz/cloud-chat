{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\1-Web-Projects\\\\cloud-chat\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./index.css\";\nimport { auth, db } from \"./backend/firebase-config\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { collection, addDoc, setDoc, doc, query, orderBy, limitToLast, serverTimestamp } from \"firebase/firestore\";\nimport { useDocumentData, useCollectionData } from \"react-firebase-hooks/firestore\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\nimport SignIn from \"./components/SignIn\";\nimport DropMenu from \"./components/DropMenu\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Header from \"./components/Header\";\nimport UserDisplay from \"./components/UserDisplay\";\nimport MessageForm from \"./components/MessageForm\";\nimport ChatMessage from \"./components/ChatMessage\";\nimport PublicChats from \"./components/PublicChats\";\nimport UserSettings from \"./components/user-settings-page/UserSettings\";\nimport CreateChat from \"./components/CreateChat\";\nimport UserProfile from \"./components/UserProfile\";\nimport UserList from \"./components/UserList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /* user auth state - displays signin if auth state is false*/\n  const [user, userLoading, userError] = useAuthState(auth);\n  /* account ID selection from UserList */\n\n  const [accountSelection, setAccountSelection] = useState(null);\n  /* drop-down menu toggled from header */\n\n  const [openMenu, setOpenMenu] = useState(false);\n  /* room selected from chat room list */\n\n  const [chatSelection, setChatSelection] = useState({\n    id: \"PTY6qVozXSCkslCVg6ua\",\n    name: \"main lobby\",\n    path: \"/publicChats/PTY6qVozXSCkslCVg6ua/messages\"\n  });\n  const [chatName, setChatName] = useState(\"main lobby\");\n  const messagesRef = collection(db, chatSelection.path);\n  const messagesQ = query(messagesRef, orderBy(\"createdAt\"), limitToLast(25));\n  const [messages, messagesLoading, messagesError] = useCollectionData(messagesQ, {\n    idField: \"id\"\n  });\n  /* message form */\n\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid\n    } = auth.currentUser;\n    const newMessageRef = doc(messagesRef);\n    await setDoc(newMessageRef, {\n      text: formValue,\n      createdAt: serverTimestamp(),\n      uid,\n      messageID: newMessageRef.id\n    });\n    setFormValue(\"\");\n  };\n  /* scrolling chatroom to bottom */\n\n\n  const dummy = useRef();\n  useEffect(() => {\n    if (user && messages) {\n      dummy.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [user, messages]);\n  /* screen display in drop-down menu */\n\n  const [screen, setScreen] = useState(\"chat\");\n\n  if (userLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this);\n  } else if (userError) {\n    return /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        user: user,\n        openMenu: openMenu,\n        setOpenMenu: setOpenMenu,\n        chatName: chatName,\n        children: user && /*#__PURE__*/_jsxDEV(UserDisplay, {\n          user: user,\n          setOpenMenu: setOpenMenu,\n          setScreen: setScreen,\n          setAccountSelection: setAccountSelection\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropMenu, {\n        user: user,\n        openMenu: openMenu,\n        setOpenMenu: setOpenMenu,\n        setChatSelection: setChatSelection,\n        screen: screen,\n        setScreen: setScreen,\n        setAccountSelection: setAccountSelection,\n        accountSelection: accountSelection,\n        children: [screen === \"chat\" && /*#__PURE__*/_jsxDEV(PublicChats, {\n          user: user,\n          chatSelection: chatSelection,\n          setChatSelection: setChatSelection,\n          setOpenMenu: setOpenMenu,\n          setChatName: setChatName,\n          chatName: chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), screen === \"create-chat\" && /*#__PURE__*/_jsxDEV(CreateChat, {\n          user: user,\n          chatSelection: chatSelection,\n          setChatSelection: setChatSelection,\n          setOpenMenu: setOpenMenu,\n          setChatName: setChatName,\n          chatName: chatName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 13\n        }, this), screen === \"profile\" && /*#__PURE__*/_jsxDEV(UserProfile, {\n          user: user,\n          accountSelection: accountSelection,\n          setAccountSelection: setAccountSelection,\n          setScreen: setScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this), screen === \"users\" && /*#__PURE__*/_jsxDEV(UserList, {\n          user: user,\n          accountSelection: accountSelection,\n          setAccountSelection: setAccountSelection,\n          setScreen: setScreen\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 13\n        }, this), screen === \"settings\" && /*#__PURE__*/_jsxDEV(UserSettings, {\n          user: user\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"main-box\",\n        children: userLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this) : userError ? /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this) : user ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [messagesLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 35\n          }, this), messagesError && /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 33\n          }, this), messages && messages.map((message, index) => {\n            return /*#__PURE__*/_jsxDEV(ChatMessage, {\n              message: message\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 26\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-20\",\n            ref: dummy\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this), user && /*#__PURE__*/_jsxDEV(MessageForm, {\n        sendMessage: sendMessage,\n        formValue: formValue,\n        setFormValue: setFormValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"ZK/mZJ28lponO8D4FNxLXXBVZjs=\", false, function () {\n  return [useAuthState, useCollectionData];\n});\n\n_c = App;\nexport default App;\n/* DIRECT CHATS\n- use state to switch between 'public' or 'direct' 'Chats' in messagesRef collection path\n- change 'chatSelection' to 'documentId' since this will also be used for direct messages\n- direct chats will have a 'users' field containing an array of UIDs involved in the chat\n- add 'message' to user profiles\n- test with 2 user messages first using 'message' function, group chats can be done by 'create message'\n- all chats are displayed under 'direct chats'. 'create message' can be added here\n- add notifications when messages are recieved\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jason/Documents/1-Web-Projects/cloud-chat/src/App.js"],"names":["auth","db","useAuthState","collection","addDoc","setDoc","doc","query","orderBy","limitToLast","serverTimestamp","useDocumentData","useCollectionData","Error","Loading","SignIn","DropMenu","useState","useEffect","useRef","Header","UserDisplay","MessageForm","ChatMessage","PublicChats","UserSettings","CreateChat","UserProfile","UserList","App","user","userLoading","userError","accountSelection","setAccountSelection","openMenu","setOpenMenu","chatSelection","setChatSelection","id","name","path","chatName","setChatName","messagesRef","messagesQ","messages","messagesLoading","messagesError","idField","formValue","setFormValue","sendMessage","e","preventDefault","uid","currentUser","newMessageRef","text","createdAt","messageID","dummy","current","scrollIntoView","behavior","screen","setScreen","map","message","index"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport { auth, db } from \"./backend/firebase-config\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport {\n  collection,\n  addDoc,\n  setDoc,\n  doc,\n  query,\n  orderBy,\n  limitToLast,\n  serverTimestamp,\n} from \"firebase/firestore\";\nimport {\n  useDocumentData,\n  useCollectionData,\n} from \"react-firebase-hooks/firestore\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\nimport SignIn from \"./components/SignIn\";\nimport DropMenu from \"./components/DropMenu\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Header from \"./components/Header\";\nimport UserDisplay from \"./components/UserDisplay\";\nimport MessageForm from \"./components/MessageForm\";\nimport ChatMessage from \"./components/ChatMessage\";\nimport PublicChats from \"./components/PublicChats\";\nimport UserSettings from \"./components/user-settings-page/UserSettings\";\nimport CreateChat from \"./components/CreateChat\";\nimport UserProfile from \"./components/UserProfile\";\nimport UserList from \"./components/UserList\";\n\nfunction App() {\n  /* user auth state - displays signin if auth state is false*/\n  const [user, userLoading, userError] = useAuthState(auth);\n\n  /* account ID selection from UserList */\n  const [accountSelection, setAccountSelection] = useState(null);\n\n  /* drop-down menu toggled from header */\n  const [openMenu, setOpenMenu] = useState(false);\n\n  /* room selected from chat room list */\n  const [chatSelection, setChatSelection] = useState({\n    id: \"PTY6qVozXSCkslCVg6ua\",\n    name: \"main lobby\",\n    path: \"/publicChats/PTY6qVozXSCkslCVg6ua/messages\",\n  });\n  const [chatName, setChatName] = useState(\"main lobby\");\n\n  const messagesRef = collection(db, chatSelection.path);\n  const messagesQ = query(messagesRef, orderBy(\"createdAt\"), limitToLast(25));\n  const [messages, messagesLoading, messagesError] = useCollectionData(\n    messagesQ,\n    {\n      idField: \"id\",\n    }\n  );\n\n  /* message form */\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid } = auth.currentUser;\n    const newMessageRef = doc(messagesRef)\n    await setDoc(newMessageRef, {\n      text: formValue,\n      createdAt: serverTimestamp(),\n      uid,\n      messageID: newMessageRef.id,\n    });\n\n    setFormValue(\"\");\n  };\n\n  /* scrolling chatroom to bottom */\n  const dummy = useRef();\n\n  useEffect(() => {\n    if (user && messages) {\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [user, messages]);\n\n  /* screen display in drop-down menu */\n\n  const [screen, setScreen] = useState(\"chat\");\n\n  if (userLoading) {\n    return <Loading />;\n  } else if (userError) {\n    return <Error />;\n  } else {\n    return (\n      <div className=\"main-container\">\n        <Header\n          user={user}\n          openMenu={openMenu}\n          setOpenMenu={setOpenMenu}\n          chatName={chatName}\n        >\n          {user && (\n            <UserDisplay\n              user={user}\n              setOpenMenu={setOpenMenu}\n              setScreen={setScreen}\n              setAccountSelection={setAccountSelection}\n            />\n          )}\n        </Header>\n        <DropMenu\n          user={user}\n          openMenu={openMenu}\n          setOpenMenu={setOpenMenu}\n          setChatSelection={setChatSelection}\n          screen={screen}\n          setScreen={setScreen}\n          setAccountSelection={setAccountSelection}\n          accountSelection={accountSelection}\n        >\n          {screen === \"chat\" && (\n            <PublicChats\n              user={user}\n              chatSelection={chatSelection}\n              setChatSelection={setChatSelection}\n              setOpenMenu={setOpenMenu}\n              setChatName={setChatName}\n              chatName={chatName}\n            />\n          )}\n          {screen === \"create-chat\" && (\n            <CreateChat\n              user={user}\n              chatSelection={chatSelection}\n              setChatSelection={setChatSelection}\n              setOpenMenu={setOpenMenu}\n              setChatName={setChatName}\n              chatName={chatName}\n            />\n          )}\n          {screen === \"profile\" && (\n            <UserProfile\n              user={user}\n              accountSelection={accountSelection}\n              setAccountSelection={setAccountSelection}\n              setScreen={setScreen}\n            />\n          )}\n          {screen === \"users\" && (\n            <UserList\n              user={user}\n              accountSelection={accountSelection}\n              setAccountSelection={setAccountSelection}\n              setScreen={setScreen}\n            />\n          )}\n          {screen === \"settings\" && <UserSettings user={user} />}\n        </DropMenu>\n        <main className=\"main-box\">\n          {userLoading ? (\n            <Loading />\n          ) : userError ? (\n            <Error />\n          ) : user ? (\n            <>\n              {messagesLoading && <Loading />}\n              {messagesError && <Error />}\n              {messages &&\n                messages.map((message, index) => {\n                  return <ChatMessage key={index} message={message} />;\n                })}\n\n              <div className=\"mt-20\" ref={dummy}></div>\n            </>\n          ) : (\n            <SignIn />\n          )}\n        </main>\n        {user && (\n          <MessageForm\n            sendMessage={sendMessage}\n            formValue={formValue}\n            setFormValue={setFormValue}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* DIRECT CHATS\n- use state to switch between 'public' or 'direct' 'Chats' in messagesRef collection path\n- change 'chatSelection' to 'documentId' since this will also be used for direct messages\n- direct chats will have a 'users' field containing an array of UIDs involved in the chat\n- add 'message' to user profiles\n- test with 2 user messages first using 'message' function, group chats can be done by 'create message'\n- all chats are displayed under 'direct chats'. 'create message' can be added here\n- add notifications when messages are recieved\n*/\n"]},"metadata":{},"sourceType":"module"}