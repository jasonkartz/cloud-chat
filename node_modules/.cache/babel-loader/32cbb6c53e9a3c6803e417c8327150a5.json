{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jason\\\\Documents\\\\1-Web-Projects\\\\cloud-chat\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./index.css\";\nimport { auth, db } from \"./backend/firebase-config\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { collection, setDoc, doc, query, orderBy, limitToLast, serverTimestamp } from \"firebase/firestore\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\nimport SignIn from \"./components/SignIn\";\nimport DropMenu from \"./components/DropMenu\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Header from \"./components/Header\";\nimport UserDisplay from \"./components/UserDisplay\";\nimport MessageForm from \"./components/MessageForm\";\nimport ChatMessage from \"./components/ChatMessage\";\nimport PublicChats from \"./components/PublicChats\";\nimport UserSettings from \"./components/user-settings-page/UserSettings\";\nimport CreateChat from \"./components/CreateChat\";\nimport UserProfile from \"./components/UserProfile\";\nimport UserList from \"./components/UserList\";\nimport PrivateChats from \"./components/PrivateChats\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  /* user auth state - displays signin if auth state is false*/\n  const [user, userLoading, userError] = useAuthState(auth);\n  /* account ID selection from UserList */\n\n  const [accountSelection, setAccountSelection] = useState(null);\n  /* drop-down menu toggled from header */\n\n  const [openMenu, setOpenMenu] = useState(false);\n  /* room selected from chat room list */\n\n  const [chatSelection, setChatSelection] = useState({\n    id: \"96UnBx22d0OWd45HtlFt\",\n    name: \"Main\",\n    path: \"/publicChats/96UnBx22d0OWd45HtlFt/messages\"\n  });\n  /* for viewing older messages, sets limitToLast in messagesQ below*/\n\n  const [messagesLimit, setMessagesLimit] = useState(25);\n  /* resets message limit when changing chats */\n\n  useEffect(() => {\n    setMessagesLimit(25);\n  }, [chatSelection]);\n  const messagesRef = collection(db, chatSelection.path);\n  const messagesQ = query(messagesRef, orderBy(\"createdAt\"), limitToLast(messagesLimit));\n  const [messages, messagesLoading, messagesError] = useCollectionData(messagesQ, {\n    idField: \"id\"\n  });\n  /* message form */\n\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async e => {\n    e.preventDefault();\n    const {\n      uid\n    } = auth.currentUser;\n    const newMessageRef = doc(messagesRef);\n    await setDoc(newMessageRef, {\n      text: formValue,\n      createdAt: serverTimestamp(),\n      uid,\n      messageID: newMessageRef.id\n    });\n    setFormValue(\"\");\n  };\n  /* scrolling chatroom to bottom */\n\n\n  const dummy = useRef();\n  useEffect(() => {\n    if (user && messages) {\n      dummy.current.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    }\n  }, [user, messages]);\n  /* screen display in drop-down menu */\n\n  const [screen, setScreen] = useState(\"chat\");\n  /* theme */\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  if (userLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 12\n    }, this);\n  } else if (userError) {\n    return /*#__PURE__*/_jsxDEV(Error, {\n      error: userError,\n      content: \"user\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: darkMode && \"dark\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-4 bg-blue-200 dark:bg-slate-800\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `main-container`,\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            user: user,\n            openMenu: openMenu,\n            setOpenMenu: setOpenMenu,\n            chatSelection: chatSelection,\n            darkMode: darkMode,\n            setDarkMode: setDarkMode,\n            children: user && /*#__PURE__*/_jsxDEV(UserDisplay, {\n              user: user,\n              setOpenMenu: setOpenMenu,\n              setScreen: setScreen,\n              setAccountSelection: setAccountSelection\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DropMenu, {\n            user: user,\n            openMenu: openMenu,\n            setOpenMenu: setOpenMenu,\n            setChatSelection: setChatSelection,\n            screen: screen,\n            setScreen: setScreen,\n            setAccountSelection: setAccountSelection,\n            accountSelection: accountSelection,\n            children: [screen === \"chat\" && /*#__PURE__*/_jsxDEV(PublicChats, {\n              chatSelection: chatSelection,\n              setChatSelection: setChatSelection,\n              setOpenMenu: setOpenMenu,\n              children: /*#__PURE__*/_jsxDEV(CreateChat, {\n                user: user,\n                setChatSelection: setChatSelection,\n                setOpenMenu: setOpenMenu\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 147,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this), screen === \"private-chats\" && /*#__PURE__*/_jsxDEV(PrivateChats, {\n              user: user,\n              setChatSelection: setChatSelection,\n              setOpenMenu: setOpenMenu\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), screen === \"profile\" && /*#__PURE__*/_jsxDEV(UserProfile, {\n              user: user,\n              accountSelection: accountSelection,\n              setAccountSelection: setAccountSelection,\n              setScreen: setScreen,\n              setChatSelection: setChatSelection,\n              setOpenMenu: setOpenMenu\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), screen === \"users\" && /*#__PURE__*/_jsxDEV(UserList, {\n              user: user,\n              setAccountSelection: setAccountSelection,\n              setScreen: setScreen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 17\n            }, this), screen === \"settings\" && /*#__PURE__*/_jsxDEV(UserSettings, {\n              user: user\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n            className: \"main-box\",\n            children: userLoading ? /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 182,\n              columnNumber: 17\n            }, this) : userError ? /*#__PURE__*/_jsxDEV(Error, {\n              error: userError,\n              content: \"user in chat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 17\n            }, this) : user ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [messagesLoading && /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 187,\n                columnNumber: 39\n              }, this), messagesError && /*#__PURE__*/_jsxDEV(Error, {\n                error: messagesError,\n                content: \"messages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 21\n              }, this), messages && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [messages.length === messagesLimit && /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"load-more-btn\",\n                  onClick: () => setMessagesLimit(messagesLimit + 25),\n                  children: \"Load older messages\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 25\n                }, this), messages.map((message, index) => {\n                  return /*#__PURE__*/_jsxDEV(ChatMessage, {\n                    message: message,\n                    setOpenMenu: setOpenMenu,\n                    setAccountSelection: setAccountSelection,\n                    setScreen: setScreen\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 27\n                  }, this);\n                })]\n              }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"mt-16\",\n                ref: dummy\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(SignIn, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this), user && /*#__PURE__*/_jsxDEV(MessageForm, {\n            sendMessage: sendMessage,\n            formValue: formValue,\n            setFormValue: setFormValue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(App, \"+5R1Cp75MomP1LmDMm0b1xPliB8=\", false, function () {\n  return [useAuthState, useCollectionData];\n});\n\n_c = App;\nexport default App;\n/* DIRECT CHATS\n- use state to switch between 'public' or 'direct' 'Chats' in messagesRef collection path\n- change 'chatSelection' to 'documentId' since this will also be used for direct messages\n- direct chats will have a 'users' field containing an array of UIDs involved in the chat\n- add 'message' to user profiles\n- test with 2 user messages first using 'message' function, group chats can be done by 'create message'\n- all chats are displayed under 'direct chats'. 'create message' can be added here\n- add notifications when messages are recieved\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/jason/Documents/1-Web-Projects/cloud-chat/src/App.js"],"names":["auth","db","useAuthState","collection","setDoc","doc","query","orderBy","limitToLast","serverTimestamp","useCollectionData","Error","Loading","SignIn","DropMenu","useState","useEffect","useRef","Header","UserDisplay","MessageForm","ChatMessage","PublicChats","UserSettings","CreateChat","UserProfile","UserList","PrivateChats","App","user","userLoading","userError","accountSelection","setAccountSelection","openMenu","setOpenMenu","chatSelection","setChatSelection","id","name","path","messagesLimit","setMessagesLimit","messagesRef","messagesQ","messages","messagesLoading","messagesError","idField","formValue","setFormValue","sendMessage","e","preventDefault","uid","currentUser","newMessageRef","text","createdAt","messageID","dummy","current","scrollIntoView","behavior","screen","setScreen","darkMode","setDarkMode","length","map","message","index"],"mappings":"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","sourcesContent":["import \"./index.css\";\nimport { auth, db } from \"./backend/firebase-config\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport {\n  collection,\n  setDoc,\n  doc,\n  query,\n  orderBy,\n  limitToLast,\n  serverTimestamp,\n} from \"firebase/firestore\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport Error from \"./components/Error\";\nimport Loading from \"./components/Loading\";\nimport SignIn from \"./components/SignIn\";\nimport DropMenu from \"./components/DropMenu\";\nimport { useState, useEffect, useRef } from \"react\";\nimport Header from \"./components/Header\";\nimport UserDisplay from \"./components/UserDisplay\";\nimport MessageForm from \"./components/MessageForm\";\nimport ChatMessage from \"./components/ChatMessage\";\nimport PublicChats from \"./components/PublicChats\";\nimport UserSettings from \"./components/user-settings-page/UserSettings\";\nimport CreateChat from \"./components/CreateChat\";\nimport UserProfile from \"./components/UserProfile\";\nimport UserList from \"./components/UserList\";\nimport PrivateChats from \"./components/PrivateChats\";\n\nfunction App() {\n  /* user auth state - displays signin if auth state is false*/\n  const [user, userLoading, userError] = useAuthState(auth);\n\n  /* account ID selection from UserList */\n  const [accountSelection, setAccountSelection] = useState(null);\n\n  /* drop-down menu toggled from header */\n  const [openMenu, setOpenMenu] = useState(false);\n\n  /* room selected from chat room list */\n  const [chatSelection, setChatSelection] = useState({\n    id: \"96UnBx22d0OWd45HtlFt\",\n    name: \"Main\",\n    path: \"/publicChats/96UnBx22d0OWd45HtlFt/messages\",\n  });\n\n  /* for viewing older messages, sets limitToLast in messagesQ below*/\n\n  const [messagesLimit, setMessagesLimit] = useState(25);\n\n  /* resets message limit when changing chats */\n\n  useEffect(() => {\n    setMessagesLimit(25);\n  }, [chatSelection]);\n\n  const messagesRef = collection(db, chatSelection.path);\n  const messagesQ = query(\n    messagesRef,\n    orderBy(\"createdAt\"),\n    limitToLast(messagesLimit)\n  );\n  const [messages, messagesLoading, messagesError] = useCollectionData(\n    messagesQ,\n    {\n      idField: \"id\",\n    }\n  );\n\n  /* message form */\n  const [formValue, setFormValue] = useState(\"\");\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid } = auth.currentUser;\n    const newMessageRef = doc(messagesRef);\n    await setDoc(newMessageRef, {\n      text: formValue,\n      createdAt: serverTimestamp(),\n      uid,\n      messageID: newMessageRef.id,\n    });\n\n    setFormValue(\"\");\n  };\n\n  /* scrolling chatroom to bottom */\n  const dummy = useRef();\n\n  useEffect(() => {\n    if (user && messages) {\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\n    }\n  }, [user, messages]);\n\n  /* screen display in drop-down menu */\n\n  const [screen, setScreen] = useState(\"chat\");\n\n  /* theme */\n\n  const [darkMode, setDarkMode] = useState(false);\n\n  if (userLoading) {\n    return <Loading />;\n  } else if (userError) {\n    return <Error error={userError} content={\"user\"} />;\n  } else {\n    return (\n      <div className={darkMode && \"dark\"}>\n        <div className=\"p-4 bg-blue-200 dark:bg-slate-800\">\n          <div className={`main-container`}>\n            <Header\n              user={user}\n              openMenu={openMenu}\n              setOpenMenu={setOpenMenu}\n              chatSelection={chatSelection}\n              darkMode={darkMode}\n              setDarkMode={setDarkMode}\n            >\n              {user && (\n                <UserDisplay\n                  user={user}\n                  setOpenMenu={setOpenMenu}\n                  setScreen={setScreen}\n                  setAccountSelection={setAccountSelection}\n                />\n              )}\n            </Header>\n            <DropMenu\n              user={user}\n              openMenu={openMenu}\n              setOpenMenu={setOpenMenu}\n              setChatSelection={setChatSelection}\n              screen={screen}\n              setScreen={setScreen}\n              setAccountSelection={setAccountSelection}\n              accountSelection={accountSelection}\n            >\n              {screen === \"chat\" && (\n                <PublicChats\n                  chatSelection={chatSelection}\n                  setChatSelection={setChatSelection}\n                  setOpenMenu={setOpenMenu}\n                >\n                  <CreateChat\n                    user={user}\n                    setChatSelection={setChatSelection}\n                    setOpenMenu={setOpenMenu}\n                  />\n                </PublicChats>\n              )}\n              {screen === \"private-chats\" && (\n                <PrivateChats\n                  user={user}\n                  setChatSelection={setChatSelection}\n                  setOpenMenu={setOpenMenu}\n                />\n              )}\n              {screen === \"profile\" && (\n                <UserProfile\n                  user={user}\n                  accountSelection={accountSelection}\n                  setAccountSelection={setAccountSelection}\n                  setScreen={setScreen}\n                  setChatSelection={setChatSelection}\n                  setOpenMenu={setOpenMenu}\n                />\n              )}\n              {screen === \"users\" && (\n                <UserList\n                  user={user}\n                  setAccountSelection={setAccountSelection}\n                  setScreen={setScreen}\n                />\n              )}\n              {screen === \"settings\" && <UserSettings user={user} />}\n            </DropMenu>\n            <main className=\"main-box\">\n              {userLoading ? (\n                <Loading />\n              ) : userError ? (\n                <Error error={userError} content={\"user in chat\"} />\n              ) : user ? (\n                <>\n                  {messagesLoading && <Loading />}\n                  {messagesError && (\n                    <Error error={messagesError} content={\"messages\"} />\n                  )}\n                  {messages && (\n                    <>\n                      {messages.length === messagesLimit && (\n                        <button\n                          className=\"load-more-btn\"\n                          onClick={() => setMessagesLimit(messagesLimit + 25)}\n                        >\n                          Load older messages\n                        </button>\n                      )}\n                      {messages.map((message, index) => {\n                        return (\n                          <ChatMessage\n                            key={index}\n                            message={message}\n                            setOpenMenu={setOpenMenu}\n                            setAccountSelection={setAccountSelection}\n                            setScreen={setScreen}\n                          />\n                        );\n                      })}\n                    </>\n                  )}\n\n                  <div className=\"mt-16\" ref={dummy}></div>\n                </>\n              ) : (\n                <SignIn />\n              )}\n            </main>\n            {user && (\n              <MessageForm\n                sendMessage={sendMessage}\n                formValue={formValue}\n                setFormValue={setFormValue}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n/* DIRECT CHATS\n- use state to switch between 'public' or 'direct' 'Chats' in messagesRef collection path\n- change 'chatSelection' to 'documentId' since this will also be used for direct messages\n- direct chats will have a 'users' field containing an array of UIDs involved in the chat\n- add 'message' to user profiles\n- test with 2 user messages first using 'message' function, group chats can be done by 'create message'\n- all chats are displayed under 'direct chats'. 'create message' can be added here\n- add notifications when messages are recieved\n*/\n"]},"metadata":{},"sourceType":"module"}