[{"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\index.js":"1","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\App.js":"2","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\backend\\firebase-config.js":"3","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\SignIn.js":"4","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\ChatMessage.js":"5","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Loading.js":"6","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Error.js":"7","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\UserDisplay.js":"8","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateProfileImage.js":"9","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateUserName.js":"10","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateName.js":"11","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateEmail.js":"12","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdatePassword.js":"13","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\DeleteAccount.js":"14","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\AddSignin.js":"15","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\DropMenu.js":"16","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UserSettings.js":"17","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Header.js":"18","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\MessageForm.js":"19","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\CreateChat.js":"20","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\PublicChats.js":"21","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\UserProfile.js":"22","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\UserList.js":"23","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\PrivateChats.js":"24","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\PrivateChatUser.js":"25","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Main.js":"26"},{"size":215,"mtime":1650984563116,"results":"27","hashOfConfig":"28"},{"size":3253,"mtime":1650986396578,"results":"29","hashOfConfig":"28"},{"size":817,"mtime":1650984563244,"results":"30","hashOfConfig":"28"},{"size":6169,"mtime":1650986249951,"results":"31","hashOfConfig":"28"},{"size":3597,"mtime":1650984563802,"results":"32","hashOfConfig":"28"},{"size":266,"mtime":1650984562935,"results":"33","hashOfConfig":"28"},{"size":265,"mtime":1650984562647,"results":"34","hashOfConfig":"28"},{"size":1199,"mtime":1650984564174,"results":"35","hashOfConfig":"28"},{"size":3655,"mtime":1650984562942,"results":"36","hashOfConfig":"28"},{"size":1613,"mtime":1650984562943,"results":"37","hashOfConfig":"28"},{"size":1688,"mtime":1650984563248,"results":"38","hashOfConfig":"28"},{"size":2545,"mtime":1650984563247,"results":"39","hashOfConfig":"28"},{"size":2561,"mtime":1650984563249,"results":"40","hashOfConfig":"28"},{"size":5135,"mtime":1650984564175,"results":"41","hashOfConfig":"28"},{"size":5402,"mtime":1650984563246,"results":"42","hashOfConfig":"28"},{"size":3956,"mtime":1650984562782,"results":"43","hashOfConfig":"28"},{"size":2868,"mtime":1650984564469,"results":"44","hashOfConfig":"28"},{"size":1102,"mtime":1650984563115,"results":"45","hashOfConfig":"28"},{"size":528,"mtime":1650984562936,"results":"46","hashOfConfig":"28"},{"size":2031,"mtime":1650984562935,"results":"47","hashOfConfig":"28"},{"size":2066,"mtime":1650984562937,"results":"48","hashOfConfig":"28"},{"size":9341,"mtime":1650984562938,"results":"49","hashOfConfig":"28"},{"size":2044,"mtime":1650984562787,"results":"50","hashOfConfig":"28"},{"size":1590,"mtime":1650984562784,"results":"51","hashOfConfig":"28"},{"size":1371,"mtime":1650984563803,"results":"52","hashOfConfig":"28"},{"size":7972,"mtime":1650986435171,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"168iezm",{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"111","messages":"112","suppressedMessages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"57"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"57"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"57"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\index.js",[],[],["139","140"],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\App.js",["141","142","143","144","145","146","147"],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\backend\\firebase-config.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\SignIn.js",["148","149","150","151"],[],"import {\r\n  signInWithPopup,\r\n  signInWithEmailAndPassword,\r\n  createUserWithEmailAndPassword,\r\n  updateProfile,\r\n} from \"firebase/auth\";\r\nimport { auth, googleAuth, db } from \"../backend/firebase-config\";\r\nimport {\r\n  doc,\r\n  setDoc,\r\n  getDoc,\r\n  serverTimestamp,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport { useState } from \"react\";\r\n\r\nexport default function SignIn({\r\n  setRegisterData,\r\n  registerData,\r\n  registerMessage,\r\n  setRegisterMessage,\r\n  registerUser,\r\n}) {\r\n  const [signUpView, setSignUpView] = useState(false);\r\n\r\n  const [signInData, setSignInData] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n  });\r\n\r\n  const [signinMessage, setSigninMessage] = useState(\"\");\r\n\r\n  const signin = async () => {\r\n    const { email, password } = signInData;\r\n\r\n    setSigninMessage(\"Signing in...\");\r\n    await signInWithEmailAndPassword(auth, email, password)\r\n      .then((userCredential) => {\r\n        if (userCredential.user) {\r\n          const accountRef = doc(db, \"accounts\", auth.currentUser.uid);\r\n          updateDoc(accountRef, {\r\n            lastLogin: serverTimestamp(),\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        setSigninMessage(error.code + \" \" + error.message);\r\n        setTimeout(() => setSigninMessage(\"\"), 5000);\r\n      });\r\n  };\r\n\r\n  const signInWithGoogle = async () => {\r\n    await signInWithPopup(auth, googleAuth);\r\n  };\r\n  return (\r\n    <div className=\"background\">\r\n      <div className=\"main-container\">\r\n        <header className={`header`}>\r\n          <div className=\"flex justify-between px-2 py-1 items center\">\r\n            <h1 className=\"logo\">\r\n              <i className=\"ri-cloud-fill\"></i>CloudChat\r\n            </h1>\r\n          </div>\r\n        </header>\r\n        {\r\n          /* Sign In */\r\n          !signUpView && (\r\n            <>\r\n              <section className={`signin-section`}>\r\n                <h2 className=\"heading\">Sign In</h2>\r\n\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Enter Your Email\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={signInData.email}\r\n                  onChange={(e) =>\r\n                    setSignInData({ ...signInData, email: e.target.value })\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Enter Your Password\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={signInData.password}\r\n                  onChange={(e) =>\r\n                    setSignInData({ ...signInData, password: e.target.value })\r\n                  }\r\n                />\r\n                <div className=\"flex flex-col gap-2\">\r\n                  <button className=\"btn\" onClick={signin}>\r\n                    Sign in\r\n                  </button>\r\n                  <button className=\"btn\" onClick={() => setSignUpView(true)}>\r\n                    Create an account\r\n                  </button>\r\n                  <p>{signinMessage}</p>\r\n                </div>\r\n              </section>\r\n            </>\r\n          )\r\n        }\r\n\r\n        {\r\n          /* Sign Up */\r\n          signUpView && (\r\n            <>\r\n              <section className={`signin-section`}>\r\n                <h2 className=\"heading\">Sign Up</h2>\r\n\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Your full name\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={registerData.name}\r\n                  onChange={(e) =>\r\n                    setRegisterData({ ...registerData, name: e.target.value })\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"email\"\r\n                  placeholder=\"Your email\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={registerData.email}\r\n                  onChange={(e) =>\r\n                    setRegisterData({ ...registerData, email: e.target.value })\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"text\"\r\n                  placeholder=\"Create a username\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={registerData.username}\r\n                  onChange={(e) =>\r\n                    setRegisterData({\r\n                      ...registerData,\r\n                      username: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Create a password\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={registerData.password}\r\n                  onChange={(e) =>\r\n                    setRegisterData({\r\n                      ...registerData,\r\n                      password: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                <input\r\n                  type=\"password\"\r\n                  placeholder=\"Re-enter password\"\r\n                  className=\"text-input text-input-signin-width\"\r\n                  value={registerData.passwordCheck}\r\n                  onChange={(e) =>\r\n                    setRegisterData({\r\n                      ...registerData,\r\n                      passwordCheck: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n                <div className=\"flex flex-col gap-1\">\r\n                  <button className=\"btn\" onClick={registerUser}>\r\n                    Sign Up\r\n                  </button>\r\n                  <p>{registerMessage}</p>\r\n                  <button className=\"btn\" onClick={() => setSignUpView(false)}>\r\n                    Have an account?\r\n                  </button>\r\n                </div>\r\n              </section>\r\n            </>\r\n          )\r\n        }\r\n\r\n        <button className=\"self-center btn\" onClick={signInWithGoogle}>\r\n          <i className=\"sign-in-btn-google-icon ri-google-fill\"></i>{\" \"}\r\n          <span className=\"align-top\">Sign in with Google</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\ChatMessage.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Loading.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Error.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\UserDisplay.js",["152","153","154"],[],"import { doc } from \"firebase/firestore\";\r\nimport { useDocumentData } from \"react-firebase-hooks/firestore\";\r\nimport { db } from \"../backend/firebase-config\";\r\nimport Loading from \"./Loading\";\r\nimport Error from \"./Error\";\r\n\r\nexport default function UserDisplay({\r\n  user,\r\n  setOpenMenu,\r\n  setScreen,\r\n  setAccountSelection,\r\n  account,\r\n  accountLoading,\r\n  accountError,\r\n}) {\r\n\r\n  if (accountLoading) {\r\n    return <Loading />;\r\n  } else if (accountError) {\r\n    return <Error error={accountError} content={\"user info\"} />;\r\n  } else if (account) {\r\n    return (\r\n      <div\r\n        className=\"user-display-container\"\r\n        onClick={() => {\r\n          setAccountSelection(user.uid);\r\n          setOpenMenu(true);\r\n          setScreen(\"profile\");\r\n        }}\r\n      >\r\n        {!account.userName ? user.displayName : account.userName}\r\n        {account.photoURL && (\r\n          <img\r\n            src={account.photoURL}\r\n            alt=\"user\"\r\n            className=\"user-display-image\"\r\n            width=\"30\"\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <i className=\"text-2xl text-blue-900 ri-close-circle-line dark:text-blue-50\"></i>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateProfileImage.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateUserName.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateName.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdateEmail.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UpdatePassword.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\DeleteAccount.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\AddSignin.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\DropMenu.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\user-settings-page\\UserSettings.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Header.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\MessageForm.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\CreateChat.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\PublicChats.js",["155"],[],"import {\r\n  useCollectionData,\r\n} from \"react-firebase-hooks/firestore\";\r\nimport Error from \"./Error\";\r\nimport Loading from \"./Loading\";\r\nimport {\r\n  collection,\r\n  orderBy,\r\n  query,\r\n  limitToLast,\r\n} from \"firebase/firestore\";\r\nimport { db } from \"../backend/firebase-config\";\r\n\r\nexport default function ChatList({\r\n  chatSelection,\r\n  setChatSelection,\r\n  setOpenMenu,\r\n  children\r\n}) {\r\n  const publicChatsRef = collection(db, \"publicChats\");\r\n  const publicChatsQ = query(publicChatsRef, orderBy(\"name\"), limitToLast(25));\r\n  const [publicChats, loading, error, snapshot] =\r\n    useCollectionData(publicChatsQ);\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <Loading />\r\n      </>\r\n    );\r\n  } else if (error) {\r\n    return (\r\n      <>\r\n        <Error />\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <section className=\"settings-section\" >{children}</section>\r\n        <h1 className=\"mb-1 border-b-2 heading border-blue-50\">Chats</h1>\r\n        <ul>\r\n          {publicChats.map((chatroom, index) => {\r\n            const chatID = chatroom.id;\r\n            return (\r\n              <li\r\n                className={`rounded px-1 ${\r\n                  chatID === chatSelection\r\n                    ? \"bg-blue-50/25 text-gray-700\"\r\n                    : \"chat-list-display\"\r\n                }`}\r\n                key={index}\r\n                onClick={() => {\r\n                  if (chatID !== chatSelection.id) {\r\n                    setChatSelection({\r\n                      id: chatID,\r\n                      name: chatroom.name,\r\n                      path: \"/publicChats/\" + chatID + \"/messages\",\r\n                    });\r\n                    setOpenMenu(false);\r\n                  }\r\n                }}\r\n              >\r\n                <span>\r\n                  {chatroom.name}\r\n                  {chatID === chatSelection.id && \" (Current room)\"}\r\n                </span>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n// snapshot._snapshot.docChanges[index].doc.key.path.segments[6]\r\n","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\UserProfile.js",["156","157","158","159","160","161","162"],[],"import defaultPic from \"../images/cloud-fill.png\";\r\nimport {\r\n  doc,\r\n  orderBy,\r\n  limitToLast,\r\n  collection,\r\n  setDoc,\r\n  updateDoc,\r\n  arrayRemove,\r\n  arrayUnion,\r\n  query,\r\n} from \"firebase/firestore\";\r\nimport {\r\n  useDocumentData,\r\n  useCollectionData,\r\n} from \"react-firebase-hooks/firestore\";\r\nimport { useState } from \"react\";\r\nimport { db } from \"../backend/firebase-config\";\r\nimport Loading from \"./Loading\";\r\nimport Error from \"./Error\";\r\n\r\nexport default function Profile({\r\n  user,\r\n  accountSelection,\r\n  setAccountSelection,\r\n  setScreen,\r\n  setChatSelection,\r\n  setOpenMenu,\r\n}) {\r\n  const [openFollowList, setOpenFollowList] = useState(false);\r\n  const [selectFollowList, setSelectFollowList] = useState(\"following\");\r\n\r\n  const selectedAccountRef = doc(db, \"accounts\", accountSelection);\r\n  const [selectedAccount, selectedAccountLoading, selectedAccountError] =\r\n    useDocumentData(selectedAccountRef);\r\n\r\n  const userAccountRef = doc(db, \"accounts\", user.uid);\r\n  const [userAccount, userLoading, userError] = useDocumentData(userAccountRef);\r\n\r\n  const selectedAccountPrivateChatRef = doc(\r\n    db,\r\n    \"accounts\",\r\n    accountSelection,\r\n    \"privateChats\",\r\n    user.uid\r\n  );\r\n  const [\r\n    selectedAccountPrivateChat,\r\n    selectedAccountPrivateChatLoading,\r\n    selectedAccountPrivateChatError,\r\n  ] = useDocumentData(selectedAccountPrivateChatRef);\r\n\r\n  const userPrivateChatRef = doc(\r\n    db,\r\n    \"accounts\",\r\n    user.uid,\r\n    \"privateChats\",\r\n    accountSelection\r\n  );\r\n  const [userPrivateChat, userPrivateChatLoading, userPrivateChatError] =\r\n    useDocumentData(userPrivateChatRef);\r\n\r\n  const sendMessage = async () => {\r\n    if (userPrivateChat || selectedAccountPrivateChat) {\r\n      setChatSelection({\r\n        id: userPrivateChat.chatID,\r\n        name: `You and ${selectedAccount.userName || selectedAccount.name}`,\r\n        path: userPrivateChat.chatPath + \"/messages\",\r\n      });\r\n      setOpenMenu(false);\r\n    } else {\r\n      const userChatRef = doc(\r\n        db,\r\n        \"accounts\",\r\n        user.uid,\r\n        \"privateChats\",\r\n        selectedAccount.uid\r\n      );\r\n      const selectedAccountChatRef = doc(\r\n        db,\r\n        \"accounts\",\r\n        selectedAccount.uid,\r\n        \"privateChats\",\r\n        user.uid\r\n      );\r\n\r\n      const newChatRef = doc(collection(db, \"privateChats\"));\r\n      await setDoc(newChatRef, {\r\n        id: newChatRef.id,\r\n        users: [user.uid, selectedAccount.uid],\r\n      }).then(() => {\r\n        setDoc(userChatRef, {\r\n          chatID: newChatRef.id,\r\n          withUser: selectedAccount.uid,\r\n          chatPath: newChatRef.path,\r\n        });\r\n        setDoc(selectedAccountChatRef, {\r\n          chatID: newChatRef.id,\r\n          withUser: user.uid,\r\n          chatPath: newChatRef.path,\r\n        });\r\n        setChatSelection({\r\n          id: newChatRef.id,\r\n          name: `You and ${selectedAccount.userName || selectedAccount.name}`,\r\n          path: \"/privateChats/\" + newChatRef.id + \"/messages\",\r\n        });\r\n        setOpenMenu(false);\r\n      });\r\n    }\r\n  };\r\n\r\n  const followUser = async () => {\r\n    updateDoc(userAccountRef, {\r\n      following: arrayUnion(selectedAccount.uid),\r\n    });\r\n\r\n    updateDoc(selectedAccountRef, {\r\n      followers: arrayUnion(user.uid),\r\n    });\r\n  };\r\n\r\n  const unFollowUser = () => {\r\n    updateDoc(userAccountRef, {\r\n      following: arrayRemove(selectedAccount.uid),\r\n    });\r\n\r\n    updateDoc(selectedAccountRef, {\r\n      followers: arrayRemove(user.uid),\r\n    });\r\n  };\r\n\r\n  const accountsRef = collection(db, \"accounts\");\r\n  const accountsQ = query(accountsRef, orderBy(\"name\"), limitToLast(25));\r\n  const [accounts, accountsLoading, accountsError, snapshot] =\r\n    useCollectionData(accountsQ);\r\n\r\n  if (selectedAccountLoading || userLoading) {\r\n    return <Loading />;\r\n  } else if (selectedAccountError || userError) {\r\n    return <Error />;\r\n  } else {\r\n    const followCheck = userAccount.following.includes(selectedAccount.uid);\r\n    const followBackCheck = selectedAccount.following.includes(userAccount.uid);\r\n\r\n    const followDisplay =\r\n      followCheck && followBackCheck\r\n        ? \"Following eachother\"\r\n        : followCheck\r\n        ? \"Following\"\r\n        : followBackCheck\r\n        ? \"Follows you\"\r\n        : \"\";\r\n\r\n    return (\r\n      <>\r\n        <section className=\"settings-section\">\r\n          {openFollowList && (\r\n            <button\r\n              className=\"profile-back-btn\"\r\n              onClick={() => setOpenFollowList(false)}\r\n            >\r\n              <i className=\"ri-arrow-go-back-line\"></i>\r\n              <span> Back to profile</span>\r\n            </button>\r\n          )}\r\n          <div className=\"\">\r\n            <h1 className=\"heading\">\r\n              {selectedAccount.userName || selectedAccount.name}\r\n            </h1>\r\n            {selectedAccount.userName && (\r\n              <p className=\"text-sm font-semibold\">{selectedAccount.name}</p>\r\n            )}\r\n            <p className=\"text-sm italic\">{followDisplay}</p>\r\n          </div>\r\n\r\n          {/* Default screen */}\r\n\r\n          {!openFollowList && (\r\n            <>\r\n              <p className=\"font-bold\">\r\n                <span\r\n                  className=\"hover:cursor-pointer\"\r\n                  onClick={() => {\r\n                    setOpenFollowList(true);\r\n                    setSelectFollowList(\"following\");\r\n                  }}\r\n                >\r\n                  Followers{\" \"}\r\n                  {selectedAccount.followers\r\n                    ? selectedAccount.followers.length\r\n                    : \"0\"}\r\n                </span>{\" \"}\r\n                |{\" \"}\r\n                <span\r\n                  className=\"hover:cursor-pointer\"\r\n                  onClick={() => {\r\n                    setOpenFollowList(true);\r\n                    setSelectFollowList(\"followers\");\r\n                  }}\r\n                >\r\n                  Following{\" \"}\r\n                  {selectedAccount.following\r\n                    ? selectedAccount.following.length\r\n                    : \"0\"}\r\n                </span>\r\n              </p>\r\n\r\n              <img\r\n                src={selectedAccount.photoURL || defaultPic}\r\n                alt=\"user\"\r\n                width=\"100\"\r\n                className=\"rounded\"\r\n              />\r\n\r\n              {selectedAccount.uid !== user.uid && (\r\n                <div className=\"flex gap-2\">\r\n                  <button\r\n                    className=\"flex items-center gap-1 btn\"\r\n                    onClick={followCheck ? unFollowUser : followUser}\r\n                  >\r\n                    <i\r\n                      className={`ri-user-${\r\n                        followCheck ? \"unfollow\" : \"follow\"\r\n                      }-line`}\r\n                    ></i>\r\n                    <span>{followCheck ? \"Unfollow\" : \"Follow\"}</span>\r\n                  </button>\r\n                  <button\r\n                    className=\"flex items-center gap-1 btn\"\r\n                    onClick={() => sendMessage()}\r\n                  >\r\n                    <i className={`ri-chat-2-line`}></i>\r\n                    <span>Message</span>\r\n                  </button>\r\n                </div>\r\n              )}\r\n              <p className=\"text-sm\">\r\n                Last Login:{\" \"}\r\n                {selectedAccount.lastLogin &&\r\n                  selectedAccount.lastLogin.toDate().toLocaleString()}\r\n              </p>\r\n\r\n              {selectedAccount.uid !== user.uid && (\r\n                <p\r\n                  className=\"profile-back-btn\"\r\n                  onClick={() => setScreen(\"users\")}\r\n                >\r\n                  <i className=\"text-lg font-bold ri-arrow-go-back-line\"></i>\r\n                  <span>User List</span>\r\n                </p>\r\n              )}\r\n            </>\r\n          )}\r\n        </section>\r\n\r\n        {/* Follower/Following Screen */}\r\n\r\n        {openFollowList && (\r\n          <>\r\n            <div className=\"flex flex-col\">\r\n              <h1 className=\"heading\">\r\n                {selectFollowList === \"followers\" ? \"Following\" : \"Followers\"}\r\n              </h1>\r\n            </div>\r\n            <ul>\r\n              {accounts.map((account, index) => {\r\n                return (\r\n                  account[selectFollowList].includes(selectedAccount.uid) && (\r\n                    <li\r\n                      className=\"user-list-display\"\r\n                      key={index}\r\n                      onClick={() => {\r\n                        setAccountSelection(account.uid);\r\n                        setOpenFollowList(false);\r\n                        setScreen(\"profile\");\r\n                      }}\r\n                    >\r\n                      <img\r\n                        src={account.photoURL || defaultPic}\r\n                        alt=\"user\"\r\n                        width=\"25\"\r\n                        className=\"self-center rounded\"\r\n                      />\r\n                      <span className=\"flex flex-col\">\r\n                        <p>{account.userName || account.name} </p>\r\n                        <p className=\"text-sm\">\r\n                          {account.userName && account.name}\r\n                        </p>\r\n                      </span>\r\n                    </li>\r\n                  )\r\n                );\r\n              })}\r\n            </ul>\r\n          </>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\UserList.js",["163"],[],"import defaultPic from \"../images/cloud-fill.png\";\r\nimport {\r\n  useCollectionData,\r\n} from \"react-firebase-hooks/firestore\";\r\nimport Error from \"./Error\";\r\nimport Loading from \"./Loading\";\r\nimport {\r\n  collection,\r\n  orderBy,\r\n  query,\r\n  limitToLast,\r\n} from \"firebase/firestore\";\r\nimport { useState, } from \"react\";\r\nimport { db } from \"../backend/firebase-config\";\r\n\r\nexport default function UserList({\r\n  user,\r\n  setAccountSelection,\r\n  setScreen,\r\n}) {\r\n  const [usersLimit, setUsersLimit] = useState(20);\r\n\r\n  const accountsRef = collection(db, \"accounts\");\r\n  const accountsQ = query(\r\n    accountsRef,\r\n    orderBy(\"name\"),\r\n    limitToLast(usersLimit)\r\n  );\r\n  const [accounts, loading, error, snapshot] = useCollectionData(accountsQ);\r\n\r\n  if (loading) {\r\n    return <Loading />;\r\n  } else if (error) {\r\n    return <Error />;\r\n  } else {\r\n    return (\r\n      <ul>\r\n        {accounts.map((account, index) => {\r\n          return (\r\n            account.uid !== user.uid && (\r\n              <li\r\n                className=\"user-list-display\"\r\n                key={index}\r\n                onClick={() => {\r\n                  setAccountSelection(account.uid);\r\n                  setScreen(\"profile\");\r\n                }}\r\n              >\r\n                <img\r\n                  src={account.photoURL || defaultPic}\r\n                  alt=\"user\"\r\n                  width=\"25\"\r\n                  className=\"self-center rounded\"\r\n                />\r\n                <span className=\"flex flex-col\">\r\n                  <p>{account.userName || account.name} </p>\r\n                  <p className=\"text-sm\">{account.userName && account.name}</p>\r\n                </span>\r\n              </li>\r\n            )\r\n          );\r\n        })}\r\n        {accounts.length === usersLimit && (\r\n          <li>\r\n            <button\r\n              className=\"load-more-btn\"\r\n              onClick={() => setUsersLimit(usersLimit + 20)}\r\n            >\r\n              Load more...\r\n            </button>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\PrivateChats.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\PrivateChatUser.js",[],[],"C:\\Users\\jason\\Documents\\1-Web-Projects\\cloud-chat\\src\\components\\Main.js",["164","165","166","167"],[],"import { auth, db, storage } from \"../backend/firebase-config\";\r\nimport { ref } from \"firebase/storage\";\r\nimport { useDownloadURL } from \"react-firebase-hooks/storage\";\r\nimport {\r\n  collection,\r\n  setDoc,\r\n  doc,\r\n  query,\r\n  orderBy,\r\n  limitToLast,\r\n  serverTimestamp,\r\n  getDoc,\r\n  updateDoc,\r\n} from \"firebase/firestore\";\r\nimport {\r\n  useCollectionData,\r\n  useDocumentData,\r\n} from \"react-firebase-hooks/firestore\";\r\nimport Error from \"./Error\";\r\nimport Loading from \"./Loading\";\r\nimport DropMenu from \"./DropMenu\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport Header from \"./Header\";\r\nimport UserDisplay from \"./UserDisplay\";\r\nimport MessageForm from \"./MessageForm\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport PublicChats from \"./PublicChats\";\r\nimport UserSettings from \"./user-settings-page/UserSettings\";\r\nimport CreateChat from \"./CreateChat\";\r\nimport UserProfile from \"./UserProfile\";\r\nimport UserList from \"./UserList\";\r\nimport PrivateChats from \"./PrivateChats\";\r\n\r\n\r\nfunction Main({ user, userLoading, userError, cloudImg }) {\r\n  const accountRef = doc(db, \"accounts\", auth.currentUser.uid);\r\n  const [account, accountLoading, accountError] = useDocumentData(accountRef);\r\n\r\n\r\n  useEffect(() => {\r\n    const { uid, displayName, email, photoURL } = auth.currentUser;\r\n    const docSnap = getDoc(accountRef);\r\n\r\n    if (docSnap.exists) {\r\n      updateDoc(accountRef, {\r\n        lastLogin: serverTimestamp(),\r\n      });\r\n    } else {\r\n      setDoc(accountRef, {\r\n        uid: uid,\r\n        name: displayName,\r\n        userName: \"\",\r\n        email: email,\r\n        photoURL: photoURL || cloudImg,\r\n        lastLogin: serverTimestamp(),\r\n        followers: [],\r\n        following: [],\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  /* account ID selection from UserList */\r\n  const [accountSelection, setAccountSelection] = useState(null);\r\n\r\n  /* drop-down menu toggled from header */\r\n  const [openMenu, setOpenMenu] = useState(false);\r\n\r\n  /* room selected from chat room list */\r\n  const [chatSelection, setChatSelection] = useState({\r\n    id: \"96UnBx22d0OWd45HtlFt\",\r\n    name: \"Main\",\r\n    path: \"/publicChats/96UnBx22d0OWd45HtlFt/messages\",\r\n  });\r\n\r\n  /* for viewing older messages, sets limitToLast in messagesQ below*/\r\n\r\n  const [messagesLimit, setMessagesLimit] = useState(25);\r\n\r\n  /* resets message limit when changing chats */\r\n\r\n  useEffect(() => {\r\n    setMessagesLimit(25);\r\n  }, [chatSelection]);\r\n\r\n  const messagesRef = collection(db, chatSelection.path);\r\n  const messagesQ = query(\r\n    messagesRef,\r\n    orderBy(\"createdAt\"),\r\n    limitToLast(messagesLimit)\r\n  );\r\n  const [messages, messagesLoading, messagesError] = useCollectionData(\r\n    messagesQ,\r\n    {\r\n      idField: \"id\",\r\n    }\r\n  );\r\n\r\n  /* message form */\r\n  const [formValue, setFormValue] = useState(\"\");\r\n\r\n  const sendMessage = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const { uid } = auth.currentUser;\r\n    const newMessageRef = doc(messagesRef);\r\n    await setDoc(newMessageRef, {\r\n      text: formValue,\r\n      createdAt: serverTimestamp(),\r\n      uid,\r\n      messageID: newMessageRef.id,\r\n    });\r\n\r\n    setFormValue(\"\");\r\n  };\r\n\r\n  /* scrolling chatroom to bottom */\r\n  const dummy = useRef();\r\n\r\n  useEffect(() => {\r\n    if (user && messages) {\r\n      dummy.current.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [user, messages]);\r\n\r\n  /* screen display in drop-down menu */\r\n\r\n  const [screen, setScreen] = useState(\"chat\");\r\n\r\n  /* theme */\r\n\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  if (userLoading) {\r\n    return <Loading />;\r\n  } else if (userError) {\r\n    return <Error error={userError} content={\"user\"} />;\r\n  } else {\r\n    return (\r\n      <div className={`${darkMode && \"dark\"}`}>\r\n        <div className=\"background\">\r\n          <div className={`main-container`}>\r\n            <Header\r\n              user={user}\r\n              openMenu={openMenu}\r\n              setOpenMenu={setOpenMenu}\r\n              chatSelection={chatSelection}\r\n              darkMode={darkMode}\r\n              setDarkMode={setDarkMode}\r\n            >\r\n              {user && (\r\n                <UserDisplay\r\n                  user={user}\r\n                  setOpenMenu={setOpenMenu}\r\n                  setScreen={setScreen}\r\n                  setAccountSelection={setAccountSelection}\r\n                  account={account}\r\n                  accountLoading={accountLoading}\r\n                  accountError={accountError}\r\n                />\r\n              )}\r\n            </Header>\r\n            <DropMenu\r\n              user={user}\r\n              openMenu={openMenu}\r\n              setOpenMenu={setOpenMenu}\r\n              setChatSelection={setChatSelection}\r\n              screen={screen}\r\n              setScreen={setScreen}\r\n              setAccountSelection={setAccountSelection}\r\n              accountSelection={accountSelection}\r\n            >\r\n              {screen === \"chat\" && (\r\n                <PublicChats\r\n                  chatSelection={chatSelection}\r\n                  setChatSelection={setChatSelection}\r\n                  setOpenMenu={setOpenMenu}\r\n                >\r\n                  <CreateChat\r\n                    user={user}\r\n                    setChatSelection={setChatSelection}\r\n                    setOpenMenu={setOpenMenu}\r\n                  />\r\n                </PublicChats>\r\n              )}\r\n              {screen === \"private-chats\" && (\r\n                <PrivateChats\r\n                  user={user}\r\n                  setChatSelection={setChatSelection}\r\n                  setOpenMenu={setOpenMenu}\r\n                />\r\n              )}\r\n              {screen === \"profile\" && (\r\n                <UserProfile\r\n                  user={user}\r\n                  accountSelection={accountSelection}\r\n                  setAccountSelection={setAccountSelection}\r\n                  setScreen={setScreen}\r\n                  setChatSelection={setChatSelection}\r\n                  setOpenMenu={setOpenMenu}\r\n                />\r\n              )}\r\n              {screen === \"users\" && (\r\n                <UserList\r\n                  user={user}\r\n                  setAccountSelection={setAccountSelection}\r\n                  setScreen={setScreen}\r\n                />\r\n              )}\r\n              {screen === \"settings\" && <UserSettings user={user} />}\r\n            </DropMenu>\r\n            <main className=\"main-box\">\r\n              <>\r\n                {messagesLoading && <Loading />}\r\n                {messagesError && (\r\n                  <Error\r\n                    error={messagesError}\r\n                    content={\"messages. Try refreshing your browser.\"}\r\n                  />\r\n                )}\r\n                {messages && (\r\n                  <>\r\n                    {messages.length === messagesLimit && (\r\n                      <button\r\n                        className=\"load-more-btn\"\r\n                        onClick={() => setMessagesLimit(messagesLimit + 25)}\r\n                      >\r\n                        Load older messages\r\n                      </button>\r\n                    )}\r\n                    {messages.map((message, index) => {\r\n                      return (\r\n                        <ChatMessage\r\n                          key={index}\r\n                          message={message}\r\n                          setOpenMenu={setOpenMenu}\r\n                          setAccountSelection={setAccountSelection}\r\n                          setScreen={setScreen}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </>\r\n                )}\r\n\r\n                <div className=\"mt-16\" ref={dummy}></div>\r\n              </>\r\n            </main>\r\n            {user && (\r\n              <MessageForm\r\n                sendMessage={sendMessage}\r\n                formValue={formValue}\r\n                setFormValue={setFormValue}\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;\r\n",{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","severity":1,"message":"173","line":3,"column":3,"nodeType":"174","messageId":"175","endLine":3,"endColumn":18},{"ruleId":"172","severity":1,"message":"176","line":4,"column":3,"nodeType":"174","messageId":"175","endLine":4,"endColumn":29},{"ruleId":"172","severity":1,"message":"177","line":11,"column":3,"nodeType":"174","messageId":"175","endLine":11,"endColumn":9},{"ruleId":"172","severity":1,"message":"178","line":13,"column":3,"nodeType":"174","messageId":"175","endLine":13,"endColumn":12},{"ruleId":"172","severity":1,"message":"179","line":16,"column":16,"nodeType":"174","messageId":"175","endLine":16,"endColumn":26},{"ruleId":"172","severity":1,"message":"180","line":29,"column":20,"nodeType":"174","messageId":"175","endLine":29,"endColumn":33},{"ruleId":"172","severity":1,"message":"181","line":29,"column":35,"nodeType":"174","messageId":"175","endLine":29,"endColumn":50},{"ruleId":"172","severity":1,"message":"182","line":4,"column":3,"nodeType":"174","messageId":"175","endLine":4,"endColumn":33},{"ruleId":"172","severity":1,"message":"183","line":5,"column":3,"nodeType":"174","messageId":"175","endLine":5,"endColumn":16},{"ruleId":"172","severity":1,"message":"184","line":10,"column":3,"nodeType":"174","messageId":"175","endLine":10,"endColumn":9},{"ruleId":"172","severity":1,"message":"177","line":11,"column":3,"nodeType":"174","messageId":"175","endLine":11,"endColumn":9},{"ruleId":"172","severity":1,"message":"185","line":1,"column":10,"nodeType":"174","messageId":"175","endLine":1,"endColumn":13},{"ruleId":"172","severity":1,"message":"186","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":25},{"ruleId":"172","severity":1,"message":"187","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":12},{"ruleId":"172","severity":1,"message":"188","line":22,"column":39,"nodeType":"174","messageId":"175","endLine":22,"endColumn":47},{"ruleId":"172","severity":1,"message":"189","line":49,"column":5,"nodeType":"174","messageId":"175","endLine":49,"endColumn":38},{"ruleId":"172","severity":1,"message":"190","line":50,"column":5,"nodeType":"174","messageId":"175","endLine":50,"endColumn":36},{"ruleId":"172","severity":1,"message":"191","line":60,"column":27,"nodeType":"174","messageId":"175","endLine":60,"endColumn":49},{"ruleId":"172","severity":1,"message":"192","line":60,"column":51,"nodeType":"174","messageId":"175","endLine":60,"endColumn":71},{"ruleId":"172","severity":1,"message":"193","line":134,"column":20,"nodeType":"174","messageId":"175","endLine":134,"endColumn":35},{"ruleId":"172","severity":1,"message":"194","line":134,"column":37,"nodeType":"174","messageId":"175","endLine":134,"endColumn":50},{"ruleId":"172","severity":1,"message":"188","line":134,"column":52,"nodeType":"174","messageId":"175","endLine":134,"endColumn":60},{"ruleId":"172","severity":1,"message":"188","line":29,"column":36,"nodeType":"174","messageId":"175","endLine":29,"endColumn":44},{"ruleId":"172","severity":1,"message":"195","line":1,"column":20,"nodeType":"174","messageId":"175","endLine":1,"endColumn":27},{"ruleId":"172","severity":1,"message":"196","line":2,"column":10,"nodeType":"174","messageId":"175","endLine":2,"endColumn":13},{"ruleId":"172","severity":1,"message":"197","line":3,"column":10,"nodeType":"174","messageId":"175","endLine":3,"endColumn":24},{"ruleId":"198","severity":1,"message":"199","line":60,"column":6,"nodeType":"200","endLine":60,"endColumn":8,"suggestions":"201"},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'signInWithPopup' is defined but never used.","Identifier","unusedVar","'signInWithEmailAndPassword' is defined but never used.","'getDoc' is defined but never used.","'updateDoc' is defined but never used.","'googleAuth' is defined but never used.","'cloudImgError' is assigned a value but never used.","'cloudImgLoading' is assigned a value but never used.","'createUserWithEmailAndPassword' is defined but never used.","'updateProfile' is defined but never used.","'setDoc' is defined but never used.","'doc' is defined but never used.","'useDocumentData' is defined but never used.","'db' is defined but never used.","'snapshot' is assigned a value but never used.","'selectedAccountPrivateChatLoading' is assigned a value but never used.","'selectedAccountPrivateChatError' is assigned a value but never used.","'userPrivateChatLoading' is assigned a value but never used.","'userPrivateChatError' is assigned a value but never used.","'accountsLoading' is assigned a value but never used.","'accountsError' is assigned a value but never used.","'storage' is defined but never used.","'ref' is defined but never used.","'useDownloadURL' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accountRef' and 'cloudImg'. Either include them or remove the dependency array.","ArrayExpression",["204"],"no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},"Update the dependencies array to be: [accountRef, cloudImg]",{"range":"207","text":"208"},[1741,1743],"[accountRef, cloudImg]"]